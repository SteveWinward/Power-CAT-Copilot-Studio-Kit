/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./CSKitAPITester/index.ts":
/*!*********************************!*\
  !*** ./CSKitAPITester/index.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CSKitAPITester: () => (/* binding */ CSKitAPITester)\n/* harmony export */ });\n/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./services */ \"./CSKitAPITester/services.ts\");\nvar __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nclass CSKitAPITester {\n  /**\r\n   * Used to initialize the control instance. Controls can kick off remote server calls and other initialization actions here.\r\n   * Data-set values are not initialized here, use updateView.\r\n   * @param context The entire property bag available to control via Context Object; It contains values as set up by the customizer mapped to property names defined in the manifest, as well as utility functions.\r\n   * @param notifyOutputChanged A callback method to alert the framework that the control has new outputs ready to be retrieved asynchronously.\r\n   * @param state A piece of data that persists in one session for a single user. Can be set at any point in a controls life cycle by calling 'setControlState' in the Mode interface.\r\n   * @param container If a control is marked control-type='standard', it will receive an empty div element within which it can render its content.\r\n   */\n  init(context, notifyOutputChanged, state, container) {\n    this.context = context;\n    this.notifyOutputChanged = notifyOutputChanged;\n  }\n  /**\r\n   * Called when any value in the property bag has changed. This includes field values, data-sets, global values such as container height and width, offline status, control metadata values such as label, visible, etc.\r\n   * @param context The entire property bag available to control via Context Object; It contains values as set up by the customizer mapped to names defined in the manifest, as well as utility functions\r\n   */\n  updateView(context) {\n    var _a, _b, _c, _d;\n    var contextEx = context;\n    var apiMethod = (_a = context.parameters.RequestURL.raw) !== null && _a !== void 0 ? _a : \"\";\n    var method = context.parameters.Method.raw;\n    var services = new _services__WEBPACK_IMPORTED_MODULE_0__.Services();\n    var data = (_b = context.parameters.Data.raw) !== null && _b !== void 0 ? _b : \"\";\n    var headers = new Headers();\n    var inputHeaders = (_c = context.parameters.Headers.raw) !== null && _c !== void 0 ? _c : \"\";\n    try {\n      if (inputHeaders != \"\" && inputHeaders != null && inputHeaders != undefined) {\n        var JsonObj = JSON.parse(inputHeaders);\n        JsonObj.forEach(item => {\n          headers.append(item.key, item.value);\n        });\n      } else {\n        headers.append(\"Content-Type\", \"application/json\");\n      }\n    } catch (_e) {\n      console.warn(\"Invalid JSON format for Headers\");\n      headers.append(\"Content-Type\", \"application/json\");\n    }\n    if (context.updatedProperties.indexOf(\"Trigger\" /* InputProperties.Trigger */) > -1) {\n      if (apiMethod) {\n        var environmentUrl = contextEx.page.getClientUrl();\n        var endPoint = environmentUrl.concat(apiMethod);\n        var cdate = Date.now();\n        var responseTime = 0;\n        switch (method) {\n          case \"Get\" /* TriggerTypes.Get */:\n            services.Get(endPoint, headers).then(response => {\n              var _a, _b, _c;\n              responseTime = Date.now() - cdate;\n              this.response = response.Output;\n              this.isSuccessful = true;\n              this.isError = false;\n              this.requestSize = new Blob([response.Output]).size;\n              this.responseTime = (_a = responseTime.toString()) !== null && _a !== void 0 ? _a : \"\";\n              this.statusCode = (_b = response.StatusCode) !== null && _b !== void 0 ? _b : 0;\n              this.isXML = (_c = response.IsXML) !== null && _c !== void 0 ? _c : false;\n              this.notifyOutputChanged();\n            }).catch(result => {\n              var _a, _b, _c;\n              this.response = result.Output;\n              this.isSuccessful = false;\n              this.isError = true;\n              this.responseTime = (_a = responseTime.toString()) !== null && _a !== void 0 ? _a : \"\";\n              this.statusCode = (_b = result.StatusCode) !== null && _b !== void 0 ? _b : 500;\n              this.isXML = (_c = result.IsXML) !== null && _c !== void 0 ? _c : false;\n              this.notifyOutputChanged();\n            });\n            break;\n          case \"Post\" /* TriggerTypes.Post */:\n            responseTime = Date.now() - cdate;\n            services.Post(endPoint, data, headers).then(response => {\n              var _a, _b, _c, _d;\n              this.response = response.Output;\n              this.isSuccessful = true;\n              this.isError = false;\n              this.requestSize = response.Headers != undefined ? (_a = parseInt(response.Headers.get(\"Content-Length\"))) !== null && _a !== void 0 ? _a : new Blob([response.Output]).size : new Blob([response.Output]).size;\n              this.responseTime = (_b = responseTime.toString()) !== null && _b !== void 0 ? _b : \"\";\n              this.statusCode = (_c = response.StatusCode) !== null && _c !== void 0 ? _c : 500;\n              this.isXML = (_d = response.IsXML) !== null && _d !== void 0 ? _d : false;\n              this.notifyOutputChanged();\n            }).catch(result => {\n              (() => __awaiter(this, void 0, void 0, function* () {\n                var _a, _b;\n                this.response = result.Output;\n                this.isSuccessful = false;\n                this.isError = true;\n                this.responseTime = responseTime.toString();\n                this.statusCode = (_a = result.StatusCode) !== null && _a !== void 0 ? _a : 500;\n                this.isXML = (_b = result.IsXML) !== null && _b !== void 0 ? _b : false;\n                this.notifyOutputChanged();\n              }))();\n            });\n            break;\n          case \"Patch\" /* TriggerTypes.Patch */:\n            responseTime = Date.now() - cdate;\n            services.Patch(endPoint, data, headers).then(response => {\n              var _a, _b, _c, _d;\n              this.response = response.Output;\n              this.isSuccessful = true;\n              this.isError = false;\n              this.requestSize = response.Headers != undefined ? (_a = parseInt(response.Headers.get(\"Content-Length\"))) !== null && _a !== void 0 ? _a : new Blob([response.Output]).size : new Blob([response.Output]).size;\n              this.responseTime = (_b = responseTime.toString()) !== null && _b !== void 0 ? _b : \"\";\n              this.statusCode = (_c = response.StatusCode) !== null && _c !== void 0 ? _c : 500;\n              this.isXML = (_d = response.IsXML) !== null && _d !== void 0 ? _d : false;\n              this.notifyOutputChanged();\n            }).catch(result => {\n              (() => __awaiter(this, void 0, void 0, function* () {\n                var _a, _b;\n                this.response = result.Output;\n                this.isSuccessful = false;\n                this.isError = true;\n                this.responseTime = responseTime.toString();\n                this.statusCode = (_a = result.StatusCode) !== null && _a !== void 0 ? _a : 500;\n                this.isXML = (_b = result.IsXML) !== null && _b !== void 0 ? _b : false;\n                this.notifyOutputChanged();\n              }))();\n            });\n            break;\n          case \"Put\" /* TriggerTypes.Put */:\n            responseTime = Date.now() - cdate;\n            services.Put(endPoint, data, headers).then(response => {\n              var _a, _b, _c, _d;\n              this.response = response.Output;\n              this.isSuccessful = true;\n              this.isError = false;\n              this.requestSize = response.Headers != undefined ? (_a = parseInt(response.Headers.get(\"Content-Length\"))) !== null && _a !== void 0 ? _a : new Blob([response.Output]).size : new Blob([response.Output]).size;\n              this.responseTime = (_b = responseTime.toString()) !== null && _b !== void 0 ? _b : \"\";\n              this.statusCode = (_c = response.StatusCode) !== null && _c !== void 0 ? _c : 500;\n              this.isXML = (_d = response.IsXML) !== null && _d !== void 0 ? _d : false;\n              this.notifyOutputChanged();\n            }).catch(result => {\n              (() => __awaiter(this, void 0, void 0, function* () {\n                var _a, _b;\n                this.response = result.Output;\n                this.isSuccessful = false;\n                this.isError = true;\n                this.responseTime = responseTime.toString();\n                this.statusCode = (_a = result.StatusCode) !== null && _a !== void 0 ? _a : 500;\n                this.isXML = (_b = result.IsXML) !== null && _b !== void 0 ? _b : false;\n                this.notifyOutputChanged();\n              }))();\n            });\n            break;\n          case \"Delete\" /* TriggerTypes.Delete */:\n            responseTime = Date.now() - cdate;\n            services.Delete(endPoint, data, headers).then(response => {\n              var _a, _b, _c, _d;\n              this.response = response.Output;\n              this.isSuccessful = true;\n              this.isError = false;\n              this.requestSize = response.Headers != undefined ? (_a = parseInt(response.Headers.get(\"Content-Length\"))) !== null && _a !== void 0 ? _a : new Blob([response.Output]).size : new Blob([response.Output]).size;\n              this.responseTime = (_b = responseTime.toString()) !== null && _b !== void 0 ? _b : \"\";\n              this.statusCode = (_c = response.StatusCode) !== null && _c !== void 0 ? _c : 500;\n              this.isXML = (_d = response.IsXML) !== null && _d !== void 0 ? _d : false;\n              this.notifyOutputChanged();\n            }).catch(result => {\n              (() => __awaiter(this, void 0, void 0, function* () {\n                var _a, _b;\n                this.response = result.Output;\n                this.isSuccessful = false;\n                this.isError = true;\n                this.responseTime = responseTime.toString();\n                this.statusCode = (_a = result.StatusCode) !== null && _a !== void 0 ? _a : 500;\n                this.isXML = (_b = result.IsXML) !== null && _b !== void 0 ? _b : false;\n                this.notifyOutputChanged();\n              }))();\n            });\n            break;\n        }\n        this.requestID = (_d = context.parameters.RequestID.raw) !== null && _d !== void 0 ? _d : \"\";\n      } else {\n        console.warn(\"EndPoint/RequestURL missing !\");\n      }\n    }\n  }\n  /**\r\n   * It is called by the framework prior to a control receiving new data.\r\n   * @returns an object based on nomenclature defined in manifest, expecting object[s] for property marked as \"bound\" or \"output\"\r\n   */\n  getOutputs() {\n    return {\n      ResponseID: this.requestID,\n      IsSuccessful: this.isSuccessful,\n      IsError: this.isError,\n      OutputString: this.isXML ? new XMLSerializer().serializeToString(new DOMParser().parseFromString(this.response, \"text/xml\")) : JSON.stringify(this.response),\n      StatusCode: this.statusCode.toString(),\n      StatusContent: this.GetStatusText(this.statusCode),\n      RequestSize: this.formatBytes(this.requestSize),\n      ResponseTime: this.responseTime,\n      IsXML: this.isXML\n    };\n  }\n  /**\r\n   * Called when the control is to be removed from the DOM tree. Controls should use this call for cleanup.\r\n   * i.e. cancelling any pending remote calls, removing listeners, etc.\r\n   */\n  destroy() {\n    // Add code to cleanup control if necessary\n  }\n  GetStatusText(statusCode) {\n    var statusContent = \"\";\n    switch (statusCode) {\n      case 200:\n        statusContent = \"OK\";\n        break;\n      case 201:\n        statusContent = \"Created\";\n        break;\n      case 202:\n        statusContent = \"Accepted\";\n        break;\n      case 204:\n        statusContent = \"No Content\";\n        break;\n      case 400:\n        statusContent = \"Bad Request\";\n        break;\n      case 401:\n        statusContent = \"Unauthorized\";\n        break;\n      case 403:\n        statusContent = \"Forbidden\";\n        break;\n      case 404:\n        statusContent = \"Not Found\";\n        break;\n      case 500:\n        statusContent = \"Internal Server Error\";\n        break;\n      default:\n        statusContent = \"Unknown\";\n    }\n    return statusContent;\n  }\n  formatBytes(bytes) {\n    var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    if (!+bytes) return \"0 bytes\";\n    var k = 1024;\n    var dm = decimals < 0 ? 0 : decimals;\n    var sizes = [\"bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n    var i = Math.floor(Math.log(bytes) / Math.log(k));\n    return \"\".concat(parseFloat((bytes / Math.pow(k, i)).toFixed(dm)), \" \").concat(sizes[i]);\n  }\n}\n\n//# sourceURL=webpack://pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad/./CSKitAPITester/index.ts?");

/***/ }),

/***/ "./CSKitAPITester/services.ts":
/*!************************************!*\
  !*** ./CSKitAPITester/services.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GetCall: () => (/* binding */ GetCall),\n/* harmony export */   Services: () => (/* binding */ Services),\n/* harmony export */   customAPICall: () => (/* binding */ customAPICall)\n/* harmony export */ });\nvar __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nclass Services {\n  constructor() {\n    this.entityValue1 = {\n      fullname: \"System Administrator1\",\n      internalemailaddress: \"admin1@CRM931440.OnMicrosoft.com\",\n      systemuserid: \"a697caef-6776-ec12-8d21-000d3a0ca45e\",\n      ownerid: \"a697caef-6776-ec12-8d21-000d3a0ca45e\"\n    };\n    this.entityValue2 = {\n      fullname: \"System Administrator2\",\n      internalemailaddress: \"admin2@CRM931440.OnMicrosoft.com\",\n      systemuserid: \"a697caef-6776-ec12-8d21-000d3a0ca45e\",\n      ownerid: \"a697caef-6776-ec12-8d21-000d3a0ca45e\"\n    };\n    this.lookupValue = {\n      id: \"a697caef-6776-ec11-8d21-000d3a0ca45e\",\n      name: \"Contoso1\",\n      entityType: \"Contoso\"\n    };\n  }\n  getRecords(webAPI, entityName, selectQueryText, filterQueryText, maximumPagesize) {\n    return new Promise((resolve, reject) => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        try {\n          var selectQuery = \"?$select=\".concat(selectQueryText);\n          var filterQuery = \"&$filter=\".concat(filterQueryText);\n          var optionQuery = selectQuery.concat(filterQueryText.length > 0 ? filterQuery : \"\");\n          var oResults = yield webAPI.retrieveMultipleRecords(entityName, optionQuery, maximumPagesize);\n          resolve(oResults.entities.map(value => {\n            return value;\n          }));\n        } catch (e) {\n          if (e instanceof Error && e.name === \"PCFNonImplementedError\") {\n            console.log(\"PCFNonImplementedError\");\n            resolve([this.entityValue1, this.entityValue2]);\n          } else {\n            reject(e);\n          }\n        }\n      }))();\n    });\n  }\n  getRecordbyID(webAPI, entityName, recordID, selectQueryText, expandQueryText) {\n    return new Promise((resolve, reject) => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        try {\n          var selectQuery = \"?$select=\".concat(selectQueryText);\n          var expandQuery = \"&$filter=\".concat(expandQueryText);\n          var optionQuery = selectQueryText ? selectQuery.concat(expandQueryText.length > 0 ? expandQuery : \"\") : undefined;\n          return yield webAPI.retrieveRecord(entityName, recordID, optionQuery);\n        } catch (e) {\n          if (e instanceof Error && e.name === \"PCFNonImplementedError\") {\n            console.log(\"PCFNonImplementedError\");\n            resolve([this.entityValue1]);\n          } else {\n            reject(e);\n          }\n        }\n      }))();\n    });\n  }\n  createRecord(webAPI, entityName, data) {\n    return new Promise((resolve, reject) => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        try {\n          return yield webAPI.createRecord(entityName, data);\n        } catch (e) {\n          if (e instanceof Error && e.name === \"PCFNonImplementedError\") {\n            console.log(\"PCFNonImplementedError\");\n            resolve(this.lookupValue);\n          } else {\n            reject(e);\n          }\n        }\n      }))();\n    });\n  }\n  deleteRecord(webAPI, entityName, recordID) {\n    return new Promise((resolve, reject) => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        try {\n          return yield webAPI.deleteRecord(entityName, recordID);\n        } catch (e) {\n          if (e instanceof Error && e.name === \"PCFNonImplementedError\") {\n            console.log(\"PCFNonImplementedError\");\n            resolve(this.lookupValue);\n          } else {\n            reject(e);\n          }\n        }\n      }))();\n    });\n  }\n  updateRecord(webAPI, entityName, recordID, data) {\n    return new Promise((resolve, reject) => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        try {\n          return yield webAPI.updateRecord(entityName, recordID, data);\n        } catch (e) {\n          if (e instanceof Error && e.name === \"PCFNonImplementedError\") {\n            console.log(\"PCFNonImplementedError\");\n            resolve(this.lookupValue);\n          } else {\n            reject(e);\n          }\n        }\n      }))();\n    });\n  }\n  Get(endpoint, headersString) {\n    return new Promise((resolve, reject) => {\n      var response = {\n        Output: \"\",\n        StatusCode: 0,\n        Headers: undefined,\n        IsXML: false\n      };\n      (() => __awaiter(this, void 0, void 0, function* () {\n        try {\n          var result = yield fetch(endpoint, {\n            method: \"Get\",\n            headers: headersString //{ 'Content-Type': 'application/json' },\n          });\n          response.StatusCode = result.status;\n          response.Headers = result.headers;\n          var contentType = result.headers.get(\"content-type\");\n          if (contentType && contentType.includes(\"application/json\")) {\n            response.Output = yield result.json();\n            response.IsXML = false;\n          } else if (contentType && (contentType.includes(\"application/xml\") || contentType.includes(\"text/xml\"))) {\n            response.Output = yield result.text();\n            response.IsXML = true;\n          }\n          resolve(response);\n        } catch (e) {\n          console.error(e);\n          if (e instanceof Error && e.name === \"PCFNonImplementedError\") {\n            console.error(\"PCFNonImplementedError\");\n            resolve({\n              id: \"1\",\n              value: \"test1\"\n            });\n          } else {\n            response.Output = e;\n            response.StatusCode = 500;\n            response.IsXML = false;\n            reject(response);\n          }\n        }\n      }))();\n    });\n  }\n  Post(endpoint, data, headersString) {\n    return new Promise((resolve, reject) => {\n      var response = {\n        Output: \"\",\n        StatusCode: 0,\n        Headers: undefined,\n        IsXML: false\n      };\n      (() => __awaiter(this, void 0, void 0, function* () {\n        try {\n          var result = yield fetch(endpoint, {\n            method: \"Post\",\n            headers: headersString,\n            body: data\n          });\n          response.StatusCode = result.status;\n          response.Headers = result.headers;\n          var contentType = result.headers.get(\"content-type\");\n          if (contentType && contentType.includes(\"application/json\")) {\n            response.Output = yield result.json();\n            response.IsXML = false;\n          } else if (contentType && (contentType.includes(\"application/xml\") || contentType.includes(\"text/xml\"))) {\n            response.Output = yield result.text();\n            response.IsXML = true;\n          }\n          resolve(response);\n        } catch (e) {\n          console.error(e);\n          if (e instanceof Error && e.name === \"PCFNonImplementedError\") {\n            console.error(\"PCFNonImplementedError\");\n            resolve({\n              id: \"1\",\n              value: \"test1\"\n            });\n          } else {\n            response.Output = e;\n            response.StatusCode = 500;\n            response.IsXML = false;\n            reject(response);\n          }\n        }\n      }))();\n    });\n  }\n  Put(endpoint, data, headersString) {\n    return new Promise((resolve, reject) => {\n      var response = {\n        Output: \"\",\n        StatusCode: 0,\n        Headers: undefined,\n        IsXML: false\n      };\n      (() => __awaiter(this, void 0, void 0, function* () {\n        try {\n          var result = yield fetch(endpoint, {\n            method: \"Put\",\n            headers: headersString,\n            body: data\n          });\n          response.StatusCode = result.status;\n          response.Headers = result.headers;\n          var contentType = result.headers.get(\"content-type\");\n          if (contentType && contentType.includes(\"application/json\")) {\n            response.Output = yield result.json();\n            response.IsXML = false;\n          } else if (contentType && (contentType.includes(\"application/xml\") || contentType.includes(\"text/xml\"))) {\n            response.Output = yield result.text();\n            response.IsXML = true;\n          }\n          resolve(response);\n        } catch (e) {\n          console.error(e);\n          if (e instanceof Error && e.name === \"PCFNonImplementedError\") {\n            console.error(\"PCFNonImplementedError\");\n            resolve({\n              id: \"1\",\n              value: \"test1\"\n            });\n          } else {\n            response.Output = e;\n            response.StatusCode = 500;\n            response.IsXML = false;\n            reject(response);\n          }\n        }\n      }))();\n    });\n  }\n  Patch(endpoint, data, headersString) {\n    return new Promise((resolve, reject) => {\n      var response = {\n        Output: \"\",\n        StatusCode: 0,\n        Headers: undefined,\n        IsXML: false\n      };\n      (() => __awaiter(this, void 0, void 0, function* () {\n        try {\n          var result = yield fetch(endpoint, {\n            method: \"Patch\",\n            headers: headersString,\n            body: data\n          });\n          response.StatusCode = result.status;\n          response.Headers = result.headers;\n          var contentType = result.headers.get(\"content-type\");\n          if (contentType && contentType.includes(\"application/json\")) {\n            response.Output = yield result.json();\n            response.IsXML = false;\n          } else if (contentType && (contentType.includes(\"application/xml\") || contentType.includes(\"text/xml\"))) {\n            response.Output = yield result.text();\n            response.IsXML = true;\n          }\n          resolve(response);\n        } catch (e) {\n          console.error(e);\n          if (e instanceof Error && e.name === \"PCFNonImplementedError\") {\n            console.error(\"PCFNonImplementedError\");\n            resolve({\n              id: \"1\",\n              value: \"test1\"\n            });\n          } else {\n            response.Output = e;\n            response.StatusCode = 500;\n            response.IsXML = false;\n            reject(response);\n          }\n        }\n      }))();\n    });\n  }\n  Delete(endpoint, data, headersString) {\n    return new Promise((resolve, reject) => {\n      var response = {\n        Output: \"\",\n        StatusCode: 0,\n        Headers: undefined,\n        IsXML: false\n      };\n      (() => __awaiter(this, void 0, void 0, function* () {\n        try {\n          var result = yield fetch(endpoint, {\n            method: \"Delete\",\n            headers: headersString,\n            body: data\n          });\n          response.StatusCode = result.status;\n          response.Headers = result.headers;\n          var contentType = result.headers.get(\"content-type\");\n          if (contentType && contentType.includes(\"application/json\")) {\n            response.Output = yield result.json();\n            response.IsXML = false;\n          } else if (contentType && (contentType.includes(\"application/xml\") || contentType.includes(\"text/xml\"))) {\n            response.Output = yield result.text();\n            response.IsXML = true;\n          }\n          resolve(response);\n        } catch (e) {\n          console.error(e);\n          if (e instanceof Error && e.name === \"PCFNonImplementedError\") {\n            console.error(\"PCFNonImplementedError\");\n            resolve({\n              id: \"1\",\n              value: \"test1\"\n            });\n          } else {\n            response.Output = e;\n            response.StatusCode = 500;\n            response.IsXML = false;\n            reject(response);\n          }\n        }\n      }))();\n    });\n  }\n}\n/**\r\n *\r\n * @param endpoint | Url e.g.\r\n * @param method  POST|GET|PUT etc\r\n * @param data - OData\r\n * @returns\r\n */\nfunction customAPICall(endpoint, method, data) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return yield fetch(endpoint, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: data\n    });\n  });\n}\nfunction GetCall(endpoint) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return yield fetch(endpoint, {\n      method: \"Get\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n  });\n}\n\n//# sourceURL=webpack://pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad/./CSKitAPITester/services.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./CSKitAPITester/index.ts");
/******/ 	pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad = __webpack_exports__;
/******/ 	
/******/ })()
;
if (window.ComponentFramework && window.ComponentFramework.registerControl) {
	ComponentFramework.registerControl('PowerCAT.CSKitAPITester', pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad.CSKitAPITester);
} else {
	var PowerCAT = PowerCAT || {};
	PowerCAT.CSKitAPITester = pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad.CSKitAPITester;
	pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad = undefined;
}